version: 2

jobs:

  build_staging:
    docker:
      - image: circleci/node:9.2.0

    environment:
      TAG: emptyfish
      DOCKER_ORG: metagenscope
      REACT_APP_METAGENSCOPE_SERVICE_URL: https://www.emptyfish.net

    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Set COMMIT env var
          command: echo 'export COMMIT=${CIRCLE_SHA1::8}' >> $BASH_ENV

      - run:
          name: Sign in to Docker Hub
          command: docker login -u $DOCKER_ID -p $DOCKER_PASSWORD

      - run:
          name: Build and push web service
          environment:
            CLIENT_SERVICE: metagenscope-client
            NODE_ENV: production
          command: |
            export CLIENT_SERVICE_REPO=https://${GITHUB_TOKEN}@github.com/bchrobot/metagenscope-client.git
            docker build $CLIENT_SERVICE_REPO -t $CLIENT_SERVICE:$COMMIT
            docker tag $CLIENT_SERVICE:$COMMIT $DOCKER_ORG/$CLIENT_SERVICE:$TAG
            docker push $DOCKER_ORG/$CLIENT_SERVICE

      - run:
          name: Build and push Nginx service
          environment:
            NGINX_SERVICE: metagenscope-nginx
          command: |
            export NGINX_SERVICE_REPO=https://${GITHUB_TOKEN}@github.com/bchrobot/metagenscope-main.git#master:nginx
            docker build $NGINX_SERVICE_REPO -t $NGINX_SERVICE:$COMMIT
            docker tag $NGINX_SERVICE:$COMMIT $DOCKER_ORG/$NGINX_SERVICE:$TAG
            docker push $DOCKER_ORG/$NGINX_SERVICE

  deploy_staging:
    docker:
      - image: circleci/node:9.2.0

    working_directory: ~/repo

    steps:
      - run:
          name: Deploy to emptyfish.net
          command: |
            set -x
            echo "$DROPLET_IP $DROPLET_HOST_KEY" > ~/tmp_auth_hosts
            ssh -A -o "UserKnownHostsFile ~/tmp_auth_hosts" $DROPLET_USER@$DROPLET_IP "cd /home/metagenscope/metagenscope-app && git fetch --all && git checkout develop && sh deploy.sh"

workflows:
  version: 2

  # Run end-to-end test suite on each commit
  deploy-staging:
    jobs:
      - build_staging:
          context: org-global
          filters:
            branches:
              only: develop
      - deploy_staging:
          context: org-global
          filters:
            branches:
              only: develop
          requires:
            - build_staging
